/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp LSHFT  &kp Q           &kp W           &kp E               &kp R             &kp T              &kp Y    &kp U              &kp I               &kp O       &kp P               &kp BSPC
&kp LCTRL  &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &kp G              &kp H    &mt RIGHT_SHIFT J  &mt LEFT_CONTROL K  &mt LALT L  &mt RIGHT_GUI SEMI  &tog 4
&mo 3      &kp Z           &kp X           &kp C               &kp V             &kp B              &kp N    &kp M              &kp COMMA           &kp DOT     &kp FSLH            &mo 3
                                           &kp TAB             &lt 2 TAB         &mt LMETA SPACE    &kp RET  &lt 1 ESCAPE       &kp ESCAPE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp LEFT_BRACKET  &kp N5        &kp NUMBER_6  &kp N7        &kp RIGHT_BRACKET    &kp TILDE     &kp DEL         &kp UP          &kp BACKSPACE  &trans  &kp BSPC
&trans  &kp MINUS         &kp N9        &kp N0        &kp N1        &kp EQUAL            &kp GRAVE     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT      &trans  &trans
&trans  &kp GRAVE         &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N8               &kp C_VOL_UP  &kp C_VOL_DN    &kp C_MUTE      &trans         &trans  &trans
                                        &trans        &trans        &kp SPACE            &kp RET       &trans          &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp PIPE       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp AMPERSAND  &kp CARET         &kp PAGE_UP      &kp DELETE      &kp UP_ARROW    &kp BACKSPACE      &kp DOLLAR   &kp BSPC
&trans  &kp BACKSLASH  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL      &kp MINUS         &kp PAGE_DOWN    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW    &kp PERCENT  &trans
&trans  &kp GRAVE      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PLUS       &kp UNDERSCORE    &kp EXCLAMATION  &kp AT_SIGN     &kp SQT         &kp DOUBLE_QUOTES  &kp HASH     &trans
                                             &trans                 &trans         &kp SPACE         &kp RET          &trans          &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &out OUT_USB    &bt BT_DISC 0  &bt BT_DISC 1  &out OUT_BLE  &sys_reset     &sys_reset   &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_CLR      &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_NXT    &bootloader    &bootloader  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_CLR_ALL  &trans         &trans         &bt BT_PRV    &trans         &trans       &trans  &trans  &trans  &trans  &trans
                                       &trans         &trans        &trans         &trans       &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &kp RA(RC(F12))  &kp RA(RC(F8))  &kp RC(RA(F2))  &kp RC(RA(F1))  &trans    &trans  &trans          &trans          &trans          &trans  &trans
&trans  &kp F12          &kp F8          &kp F2          &kp F1          &trans    &trans  &kp LA(LC(F1))  &kp LA(LC(F2))  &kp LA(LC(F7))  &trans  &trans
&trans  &trans           &trans          &trans          &trans          &trans    &trans  &trans          &trans          &trans          &trans  &trans
                                         &trans          &trans          &trans    &trans  &trans          &trans
            >;
        };
    };
};
