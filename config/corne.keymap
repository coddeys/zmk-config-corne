/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&sk LEFT_SHIFT  &kp Q  &kp W  &kp F         &kp P      &kp B              &kp J            &kp L         &kp U      &kp Y    &kp SEMICOLON  &kp BSPC
&sk LALT        &kp A  &kp R  &kp S         &kp T      &kp G              &kp M            &kp N         &kp E      &kp I    &kp O          &tog 4
&mo 3           &kp Z  &kp X  &kp C         &kp D      &kp V              &kp K            &kp H         &kp COMMA  &kp DOT  &kp SLASH      &mo 3
                              &sk LEFT_GUI  &lt 1 TAB  &mt LSHFT SPACE    &mt RSHFT ENTER  &lt 2 ESCAPE  &sk RCTRL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans     &kp AT_SIGN  &kp DOLLAR         &kp PERCENT  &trans       &kp PAGE_UP     &kp DEL               &kp UP                 &kp BACKSPACE    &trans    &kp BSPC
&trans  &kp TILDE  &kp COLON    &kp DOUBLE_QUOTES  &kp SQT      &kp HASH     &kp PAGE_DOWN   &kp LEFT_ARROW        &kp DOWN_ARROW         &kp RIGHT        &kp PIPE  &trans
&trans  &trans     &kp COLON    &kp PLUS           &kp EQUAL    &trans       &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &trans    &trans
                                &trans             &trans       &kp SPACE    &kp RET         &trans                &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp SQT    &kp N5        &kp NUMBER_6  &kp N7        &kp EQUAL               &trans                &kp GRAVE         &kp CARET          &trans        &trans        &trans
&trans  &kp MINUS  &kp N9        &kp N0        &kp NUMBER_1  &kp N8                  &kp NON_US_BACKSLASH  &kp EXCLAMATION   &kp AMPERSAND      &kp ASTERISK  &kp QUESTION  &trans
&trans  &kp GRAVE  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NON_US_BACKSLASH    &trans                &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans        &trans        &trans
                                 &trans        &trans        &kp SPACE               &kp RET               &trans            &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &out OUT_USB    &bt BT_DISC 0  &bt BT_DISC 1  &out OUT_BLE  &sys_reset     &sys_reset   &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_CLR      &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_NXT    &bootloader    &bootloader  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_CLR_ALL  &trans         &trans         &bt BT_PRV    &trans         &trans       &trans  &trans  &trans  &trans  &trans
                                       &trans         &trans        &trans         &trans       &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &kp RA(RC(F12))  &kp RA(RC(F8))  &kp RC(RA(F2))  &kp RC(RA(F1))  &kp F10    &kp F11       &trans          &trans          &trans            &kp K_SLEEP  &trans
&trans  &kp F12          &kp F8          &kp F2          &kp F1          &kp F9     &key_repeat   &kp LA(LC(F1))  &kp LA(LC(F2))  &kp LA(LC(F7))    &trans       &trans
&trans  &kp F3           &kp F4          &kp F5          &kp F6          &kp F7     &kp C_VOL_DN  &kp C_VOL_UP    &kp C_MUTE      &kp K_PLAY_PAUSE  &trans       &trans
                                         &trans          &trans          &trans     &trans        &trans          &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        CondLayer {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
